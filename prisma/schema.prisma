// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model store {
  id        String      @id @default(uuid())
  name      String
  userId    String
  billboard billboard[] @relation("StoreToBillboard")
  category  category[]  @relation("StoreToCategory")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  sizes     size[]      @relation("StoreToSize")
  colours   color[]     @relation("StoreToColor")
  products  product[]   @relation("StoreToProduct")
}

model billboard {
  id        String     @id @default(uuid())
  storeId   String
  store     store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label     String
  imageURL  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  category  category[]

  // it will fix a error 
  @@index([storeId])
}

model category {
  id          String    @id @default(uuid())
  name        String
  storeId     String
  store       store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   billboard @relation(fields: [billboardId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    product[] @relation("CategoryToProduct")

  // it will fix a error 
  @@index([storeId])
  @@index([billboardId])
}

model size {
  id        String    @id @default(uuid())
  storeId   String
  store     store     @relation("StoreToSize", fields: [storeId], references: [id])
  value     String
  name      String
  products  product[] @relation("SizeToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model color {
  id        String    @id @default(uuid())
  storeId   String
  store     store     @relation("StoreToColor", fields: [storeId], references: [id])
  products  product[] @relation("ColorToProduct")
  value     String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model product {
  id         String   @id @default(uuid())
  name       String
  price      Decimal
  isFeatured Boolean
  isArchived Boolean
  images     image[]  @relation("ProductToImage")
  storeId    String
  store      store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  sizeId     String
  size       size     @relation("SizeToProduct", fields: [sizeId], references: [id])
  colorId    String
  color      color    @relation("ColorToProduct", fields: [colorId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model image {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   product  @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
